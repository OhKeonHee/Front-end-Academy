git
: 다수의 개발자가 하나의 동일한 프로젝트를 개발하는 상황인 경우, 언제 & 어떤 사람이 파일을 신규로 생성, 저장, 수정, 삭제했는지 파악하기 위해

git: 버전 관리 시스템
git은 개발자가 사용하는 개인컴퓨터 안에만 존재

github: git에 호스팅 서비스를 지원해주는 웹 클라우드 공간
gitHub > repositories > branch(master)
: 배포를 위한 목적

1개의 repository 안에 메인 branch(master) 1개, 개발용 branches(dev)

#### git 업로드
- vs 코딩 후
- git 로컬 컴퓨터 < - > gitHub(x) / repositories
1) git config --global user.name 유저이름
2) git config --global user.email 깃허브에 있는 내 이메일

- git init: initialize 약자 / 눈에 보이지 않는 임시저장 폴덜르 생성 ".git
(* 1개의 프로젝트를 새롭게 시작할 때에는 최초 한번만 git init을 사용하는 것)

- git remote add origin (레포지토리 url)

- git remote -v: 현재 로컬컴퓨터 git & repositories 연결여부 확인

- git status: 현재 로컬 폴더 안에 있는 데이터 중에서 어떤 파일을 보낼 수 있는지 확인할 수 있는 명령어

- git add (특정 파일명) or git add((한칸 띄고 온점).)
: 생성해 놓은 .git 임시저장 폴더에 어떤 데이터를 업로드 할 것 인지를 결정

- git commit: 실제 git hub에 데이터를 호스팅 하기 전에 임시로 저장해 놓은 데이터를 하나의 버전으로 생성하는 것을 확정짓는 단계 -v1/-v2/최종
  ex) git commit-m "입력하고자 하는 메시지"

- git push origin master: 실제 github라는 공간에 호스팅을 시켜주는 단계

- gitHub 호스팅 -v3

- 에러발생 (*현재 로컬컴퓨터 git & 나의 현재 gitHub 연동):
  git remote set-url origin https://OhKeonHee@github.com/OhKeonHee/레포지토리 이름

- github에 호스팅된 데이터를 가져와서 사용하는 방법
  * git clone https://github.com/OhKeonHee/exampleproject(작업하던 프로젝트명).git exFolder

- 신규 branch 생성 > 내가 작업한 데이터를 호스팅:
  git checkout -b (생성하고자 하는 branch이름)

  *신규로 호스팅된 데이터를 상사권한으로 기존 master & 신규 branch병합 (*머지라고도 함)

- git log: 그동안 git 안에 commit으로 저장되어있는 데이터를 확인할 수 있는 명령어
- q : git log에서 빠져나올 때 사용키

- git reset --hard (이동하고 싶은 commit의 해쉬값)
