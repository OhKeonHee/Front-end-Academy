======= 노드에서 타입스크립트 사용하기

1. 노드패키지 초기화 npm init -y
2. 노드 안에서 타입스크립트를 실행시키기 위한 npm i ts-node
3. 타입스크립트 컴파일링 👇
타입스크립트 실행 순서!! (3개는 무조건 같이 설치해야함!!)
- 노드js에 타입을 추가해주는 npm 설치 (*npm i @types/node)
- 타입스크립트를 노드.js에서 실행시킬 수 있도록해주는 npm 설치 (*npm i -D ts-node)
- 타입스크립트 npm 설치 (*npm i typescript)

타입스크립트 버전확인 - tsc -v

tsconfig.json -> tsc --init
타입스크립트를 자바스크립트로 컴파일링 - tsc index.ts(컴파일링 하고 싶은 파일명)


타입스크립트 안에서 객체타입을 정의하는 여러가지 방법!!
1) object 타입: 객체를 대상으로 하는 any타입

2) interface 키워드 (*예약어) : object 객체타입 정의가 너무 부실
> 객체 안에 들어가있는 속성의 타입까지 정의!!
*선택속성 (*optional property): 있으면 적용 / 없어도 문제가 없는 속성을 정의

3) class 선언방식 : 자바스크립트 문법
=> 어떤 형태의 객체를 다른 객체속성에 그대로 적용하고자 할 때
=> 키워드: implements (*객체 타입을 정의할 때, 일종의 약속을 정한다)
(*특정 속성은 무조건 채택해서 사용해야 한다!!)
=> 키워드: abstract (*추상 클래스를 만들 때 사용) // abstract는 더 큰 광위적 표현을 쓸 때 사용
(*추상하다: 어떤 사물이나 물체 혹은 객체에서 공통된 특성 혹은 속성을 추출하는 것)
=> 자바스크립트 객체 지향 프로그래밍 언어
=> 객체 지향 프로그래밍, 추상 클래스
=> extends: 특정 클래스 객체의 속성 및 메서드를 상속해줄 수 있게하는 키워드
=> super(): 클래스 객체의 값을 상속할 때, 부모의 값을 전달해주는 함수 역할
=> static : 클래스의 속성을 정적으로 만들어주는 역할
*자바스크립트 혹은 타입스크립트 모두 class가 하는 역할
(-> 프로토타입 객체를 만들어주는 역할 / ex) 붕어빵을 만들기 위한 틀 )
(*클래스를 활용해서 정의한 속성은 반드시 인스턴스 객체를 통해서만 속성값을 사용할 수 있다.)